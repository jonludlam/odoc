{0 Odoc interface guarantees}

Odoc has several 'public facing' parts, with varying levels of support guarantees.
This document describes what those interfaces are and what the support levels are
now and what we aim for in the future.

{2 Documentation comments}

The first and most important is the syntax of the documentation comments present in source code.
This is relevant to everyone who is writing code intended to be documented by odoc, and hence is applies to the widest set of people.
The differences are documented in a {{!page-markup}separate page}.

{2 CLI interface}

The way in which the odoc CLI is invoked is not trivial, and requires careful
ordering and correct arguments to produce correctly linked documentation. It is not expected that
end-users will invoke odoc by hand, but rather it will be driven by a separate tool. As a consequence of
this it is important that we preserve the ability of these tools to create good documentation with
each release of odoc, and thus we will ensure backward compatibility of the CLI as much as possible.
There are currently 3 tools that 'drive' odoc that are considered 'first class' in that we will not make
releases of odoc whilst knowingly breaking these tools. These are:

- Odig
- Dune
- OCaml

OCaml here refers to the newly merged configure option (from 4.12.0) to build the standard library documentation with
odoc. If the recommended way of invoking odoc changes we will work with the maintainers of these projects
to ensure they are updated correspondingly.

Additionally there will be a reference implementation of a tool to build Odoc's documentation which should
serve as a guide for anyone building other 'drivers' of odoc.

{2 Output formats}

Odoc currently outputs HTML files, man pages and latex documents. In a similar vein to the CLI interface,
we will try to ensure that the three tools described above will will not be broken by any changes to the
outputs - that is, that they will succeed and produce documentation that is 'correct'. We do not make any
guarantees about the internal structure of the output documents - for example, the exact nesting of
tags or sequence of latex commands may not be preserved. We will attempt to ensure that the anchors in
the HTML are preserved though, implying also that the filenames will also be preserved.

{2 Libraries}

Odoc has several internal libraries. The only one of these for which we currently expect external users is
the comment parser. This will soon be removed into an external package to link with separately and will
have its own lifecycle and support statement. Note that this will replace the existing
[octavius] library, which was the original implementation of odoc's current parser.

{2 Intermediate files}

The intermediate files that odoc produces - [.odoc] and [.odocl] should be considered to be internal only
and tied to the specific version of odoc.
